#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define MAX(X,Y) (X>Y?X:Y)

int lps(char* seq, int i, int j){
    if(i == j){
        return 1;
    }
    if(seq[i] == seq[j] && j == i+1){
        return 2;
    }
    if(seq[i] == seq[j]){
        return(lps(seq,i+1,j-1)+2);
    }
    if(seq[i] != seq[j]){
        return(MAX(lps(seq,i,j-1),lps(seq,i+1,j)));
    }
}


int main(){
    char* seq = "BBBAB";
    int n = strlen(seq);
    printf("%d",lps(seq,0,n-1));
    
    return 0;
}

-------------------------------------------------------------
import java.io.*;
import java.util.*;


public class Main
{
	public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String seq = in.nextLine();
        int n = seq.length();
        
        int dp[][] = new int[n][n];
        for(int[] i:dp){
            Arrays.fill(i,1);
            System.out.println(lps(seq.toCharArray(),0,n-1,dp));
        }
	}
	static int max(int x, int y){
   return (x>y? x:y);
}
static int lps(char[] seq, int i, int j,int dp[][]){
    if(i == j)
    return dp[i][j] = 1;
    
    if(seq[i] == seq[j] && j == i+1){
        return dp[i][j] = 2;
    }
    
    if(dp[i][j] != -1)
    return dp[i][j];
    
    if(seq[i] == seq[j]){
        return dp[i][j]=(lps(seq,i+1,j-1,dp)+2);
    }
    
    return dp[i][j]=(max(lps(seq,i,j-1,dp),lps(seq,i+1,j,dp)));
}
}
