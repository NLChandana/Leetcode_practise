ADAM number

#include<stdio.h>

int sq(int n){
    return n*n;
}

int rev(int n){
    int num = 0;
    while(n > 0){
        int dig = n %10;
        num = num * 10 + dig;
        n = n / 10;
    }
    return num;
}

int main()
{
    int n=14;
    int sq_n = sq(n);
    int rev_sq_n = rev(sq_n);
    int rev_n = rev(n);
    int sq_rev_n = sq(rev_n);
    
    if(rev_sq_n == sq_rev_n){
        printf("%d is Adam",n);
    }
    else{
        printf("%d is not Adam",n);
    }
    return 0;
}
-----------------------------------------------------
SPLITTING NUMBER

#include<stdio.h>
#include<stdlib.h>

int main(){
    
    int num;
    int power;
    int p1;
    int p2;
    int smallest_num;
    int largest_num;
    int copy_num;
    
    num = 56003127;
    power = 1;
    copy_num = num;
    smallest_num = num;
    largest_num = num;
    
    do{
        while(num / power > 9){
            power *= 10;
        }
        p1 = num / power;
        p2 = num % power;
        
        num = p2 * 10 + p1;
        
        if(num < smallest_num){
            smallest_num = num;
        }
        if(num > largest_num){
            largest_num = num;
        }
    }while(copy_num != num);
    
    printf("%d \n",smallest_num);
    printf("%d ",largest_num);
    
    
    return 0;
}

------------------------------------------------------------------------------------
29/11/2023
Given a string, reverse only vowels in it; leaving rest of the string as it is.
Input : abcdef
Output : ebcdaf
this is a test sentence

thes es e test santinci

this is a test sentence

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int isVowel(char ch){
        return(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||
           ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U');
    }

int main()
{
    
    char arr[] = "I am Chandana Lakshmi Priya";
    int first;
    int last;
    char temp;
    
    printf("%s\n",arr);
    first = 0;
    last = strlen(arr)-1;
    
    while(first < last){
        while(!isVowel(arr[first])){
            first++;
        }
        while(!isVowel(arr[last])){
            last--;
        }
        temp = arr[first];
        arr[first] = arr[last];
        arr[last] = temp;
        
        first++;
        last--;
    }
    
    printf("%s",arr);
 
    return 0;
}
----------------------------------------------------------------------
Reverse a string

I am Chandana Lakshmi Priya
ayirP imhskaL anadnahC ma I

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int isVowel(char ch){
        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||\
           ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')
           return 1;
    }

int main()
{
    
    char arr[] = "I am Chandana Lakshmi Priya";
    int first;
    int last;
    char temp;
    
    printf("%s\n",arr);
    first = 0;
    last = strlen(arr)-1;
    
    while(first < last){
        while(!isVowel(arr[first])){
            first++;
        }
        while(!isVowel(arr[last])){
            last--;
        }
        temp = arr[first];
        arr[first] = arr[last];
        arr[last] = temp;
        
        first++;
        last--;
    }
    
    printf("%s",arr);
 
    return 0;
}
---------------------------------------------------------------------------------

05/12/2023

Find the Leader of the array
Input: [16,17,7,3,5,2]
Output:[17,7,5,2]

import java.util.*;

public class Main
{
	public static void main(String[] args) {
		int[] arr = {16, 17, 7, 3, 5, 2};
		int max = 0;
		int len = arr.length;
		ArrayList<Integer> new_arr = new ArrayList<Integer>();
		
		for(int i=len-1;i>0;i--){
		    if(arr[i]>max){
		        max = arr[i];
		        new_arr.add(arr[i]);
		    }
		}
		Collections.reverse(new_arr);
		System.out.println(new_arr);
		
	}
}
----------------------------------------------------------------------------------------------------

Find the second largest number from the array

import java.util.*;

public class Main
{
	public static void main(String[] args) {
	    int[] arr = {1, 7, 3, 6, 5};
	    int max=arr[0];
	    int second_max=arr[0];
	    for(int i=0;i<arr.length;i++){
	        if(arr[i]>max || arr[i]>second_max){
	            if(arr[i] > max){
	                second_max = max;
	                max = arr[i];
	            }
	            else{
	                second_max = arr[i];
	            }
	        }
	    }
	    System.out.println(second_max);
	}
}

------------------------------------------------------------------------
05/12/2023

Finding the subsets of given set of elements using backtracking

import java.util.*;

public class Main{
    
     public static void calcSubset(List<Integer> list, List<List<Integer>> result,
				   List<Integer> subset, int index){
        result.add(new ArrayList<>(subset));
        for(int i=index;i<list.size();i++){
            subset.add(list.get(i));
            calcSubset(list, result, subset, i+1);
            subset.remove(subset.size() -1);
        }
    }
    
    
     public static List<List<Integer>> subsets(List<Integer> list){
        List<Integer> subset = new ArrayList<>();
        List<List<Integer>> result = new ArrayList<>();
        int index = 0;
        
        calcSubset(list, result, subset, index);
        return result;
    }
    
    
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        List<Integer> list = new ArrayList<Integer>();
        System.out.println("Enter the numbers of elements in the set:");
        int n = in.nextInt();
        System.out.println("Enter the elements:");
        for(int i=0;i<n;i++){
            int num = in.nextInt();
            list.add(num);
        }
        in.close();
        System.out.println(list);
        List<List<Integer>> result = subsets(list);
        for(List<Integer> subset: result){
            for(Integer num : subset){
                System.out.print(num+" ");
            }
            System.out.println();
        }
        
    }
}

-----------------------------------------------------------------------------------------

